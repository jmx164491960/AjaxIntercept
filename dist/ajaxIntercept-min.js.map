{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap dfd3285b3a9e6144df88","webpack:///./src/ajaxIntercept.js","webpack:///./src/ajaxIntercept/util.js","webpack:///./src/ajaxIntercept/xhr/index.js","webpack:///./src/ajaxIntercept/xhr/xhr.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;ACzCA;AACA;AACA;AACA;;AAEA;AACA,oCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAU,YAAY;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA,MAAK;AACL,oBAAmB,gBAAgB;AACnC;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sB;;;;;;AC7FA,wC;;;;;;ACAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB,2BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA,4BAA2B,oCAAoC;AAC/D;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA2B,uBAAuB;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA2B,mCAAmC;AAC9D;AACA;AACA,kBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,8CAA6C;AAC7C;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,wBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,wBAAuB,oBAAoB;AAC3C;AACA;;AAEA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oC","file":"ajaxIntercept-min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AjaxIntercept\"] = factory();\n\telse\n\t\troot[\"AjaxIntercept\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dfd3285b3a9e6144df88","// https://github.com/jmx164491960/AjaxIntercept\r\n/* global require, module, window */\r\nvar Util = require('./ajaxIntercept/util')\r\n\r\nvar XHR\r\nif (typeof window !== 'undefined') XHR = require('./ajaxIntercept/xhr')\r\n\r\n/*!\r\n    AjaxIntercept - 模拟请求\r\n*/\r\nvar AjaxIntercept = {\r\n    Util: Util,\r\n    setup: function(settings) {\r\n        return XHR.setup(settings)\r\n    },\r\n    _mocked: {}\r\n}\r\n\r\nAjaxIntercept.version = '1.0.0'\r\n\r\n// 避免循环依赖\r\nif (XHR) XHR.AjaxIntercept = AjaxIntercept\r\n\r\n/*\r\n    * AjaxIntercept.add( rurl, function(options) )\r\n*/\r\nAjaxIntercept.add = function(rurl, rtype, template) {\r\n    if (arguments.length === 2) {\r\n        template = rtype\r\n        rtype = undefined\r\n    }\r\n    // 拦截 XHR\r\n    if (XHR) window.XMLHttpRequest = XHR\r\n    AjaxIntercept._mocked[rurl + (rtype || '')] = {\r\n        rurl: rurl,\r\n        rtype: rtype,\r\n        template: template\r\n    }\r\n    return AjaxIntercept\r\n}\r\n\r\nmodule.exports = AjaxIntercept\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ajaxIntercept.js\n// module id = 0\n// module chunks = 0","/*\r\n    ## Utilities\r\n*/\r\nvar Util = {}\r\n\r\nUtil.extend = function extend() {\r\n    var target = arguments[0] || {},\r\n        i = 1,\r\n        length = arguments.length,\r\n        options, name, src, copy, clone\r\n\r\n    if (length === 1) {\r\n        target = this\r\n        i = 0\r\n    }\r\n\r\n    for (; i < length; i++) {\r\n        options = arguments[i]\r\n        if (!options) continue\r\n\r\n        for (name in options) {\r\n            src = target[name]\r\n            copy = options[name]\r\n\r\n            if (target === copy) continue\r\n            if (copy === undefined) continue\r\n\r\n            if (Util.isArray(copy) || Util.isObject(copy)) {\r\n                if (Util.isArray(copy)) clone = src && Util.isArray(src) ? src : []\r\n                if (Util.isObject(copy)) clone = src && Util.isObject(src) ? src : {}\r\n\r\n                target[name] = Util.extend(clone, copy)\r\n            } else {\r\n                target[name] = copy\r\n            }\r\n        }\r\n    }\r\n\r\n    return target\r\n}\r\n\r\nUtil.each = function each(obj, iterator, context) {\r\n    var i, key\r\n    if (this.type(obj) === 'number') {\r\n        for (i = 0; i < obj; i++) {\r\n            iterator(i, i)\r\n        }\r\n    } else if (obj.length === +obj.length) {\r\n        for (i = 0; i < obj.length; i++) {\r\n            if (iterator.call(context, obj[i], i, obj) === false) break\r\n        }\r\n    } else {\r\n        for (key in obj) {\r\n            if (iterator.call(context, obj[key], key, obj) === false) break\r\n        }\r\n    }\r\n}\r\n\r\nUtil.type = function type(obj) {\r\n    return (obj === null || obj === undefined) ? String(obj) : Object.prototype.toString.call(obj).match(/\\[object (\\w+)\\]/)[1].toLowerCase()\r\n}\r\n\r\nUtil.each('String Object Array RegExp Function'.split(' '), function(value) {\r\n    Util['is' + value] = function(obj) {\r\n        return Util.type(obj) === value.toLowerCase()\r\n    }\r\n})\r\n\r\nUtil.isObjectOrArray = function(value) {\r\n    return Util.isObject(value) || Util.isArray(value)\r\n}\r\n\r\nUtil.isNumeric = function(value) {\r\n    return !isNaN(parseFloat(value)) && isFinite(value)\r\n}\r\n\r\nUtil.keys = function(obj) {\r\n    var keys = [];\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) keys.push(key)\r\n    }\r\n    return keys;\r\n}\r\nUtil.values = function(obj) {\r\n    var values = [];\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) values.push(obj[key])\r\n    }\r\n    return values;\r\n}\r\n\r\nUtil.noop = function() {}\r\n\r\nmodule.exports = Util\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ajaxIntercept/util.js\n// module id = 1\n// module chunks = 0","module.exports = require('./xhr')\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ajaxIntercept/xhr/index.js\n// module id = 2\n// module chunks = 0","/* global window, document, location, Event, setTimeout */\r\n/*\r\n    ## MockXMLHttpRequest\r\n\r\n    期望的功能：\r\n    1. 完整地覆盖原生 XHR 的行为\r\n    2. 完整地模拟原生 XHR 的行为\r\n    3. 在发起请求时，自动检测是否需要拦截\r\n    4. 如果不必拦截，则执行原生 XHR 的行为\r\n    5. 如果需要拦截，则执行虚拟 XHR 的行为\r\n    6. 兼容 XMLHttpRequest 和 ActiveXObject\r\n        new window.XMLHttpRequest()\r\n        new window.ActiveXObject(\"Microsoft.XMLHTTP\")\r\n\r\n    关键方法的逻辑：\r\n    * new   此时尚无法确定是否需要拦截，所以创建原生 XHR 对象是必须的。\r\n    * open  此时可以取到 URL，可以决定是否进行拦截。\r\n    * send  此时已经确定了请求方式。\r\n\r\n    规范：\r\n    http://xhr.spec.whatwg.org/\r\n    http://www.w3.org/TR/XMLHttpRequest2/\r\n\r\n    参考实现：\r\n    https://github.com/philikon/MockHttpRequest/blob/master/lib/mock.js\r\n    https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js\r\n    https://github.com/ilinsky/xmlhttprequest/blob/master/XMLHttpRequest.js\r\n    https://github.com/firebug/firebug-lite/blob/master/content/lite/xhr.js\r\n    https://github.com/thx/RAP/blob/master/lab/rap.plugin.xinglie.js\r\n\r\n    **需不需要全面重写 XMLHttpRequest？**\r\n        http://xhr.spec.whatwg.org/#interface-xmlhttprequest\r\n        关键属性 readyState、status、statusText、response、responseText、responseXML 是 readonly，所以，试图通过修改这些状态，来模拟响应是不可行的。\r\n        因此，唯一的办法是模拟整个 XMLHttpRequest，就像 jQuery 对事件模型的封装。\r\n\r\n    // Event handlers\r\n    onloadstart         loadstart\r\n    onprogress          progress\r\n    onabort             abort\r\n    onerror             error\r\n    onload              load\r\n    ontimeout           timeout\r\n    onloadend           loadend\r\n    onreadystatechange  readystatechange\r\n */\r\n\r\nvar Util = require('../util')\r\n\r\n// 备份原生 XMLHttpRequest\r\nwindow._XMLHttpRequest = window.XMLHttpRequest\r\nwindow._ActiveXObject = window.ActiveXObject\r\n\r\n/*\r\n    PhantomJS\r\n    TypeError: '[object EventConstructor]' is not a constructor (evaluating 'new Event(\"readystatechange\")')\r\n\r\n    https://github.com/bluerail/twitter-bootstrap-rails-confirm/issues/18\r\n    https://github.com/ariya/phantomjs/issues/11289\r\n*/\r\ntry {\r\n    new window.Event('custom')\r\n} catch (exception) {\r\n    window.Event = function(type, bubbles, cancelable, detail) {\r\n        var event = document.createEvent('CustomEvent') // MUST be 'CustomEvent'\r\n        event.initCustomEvent(type, bubbles, cancelable, detail)\r\n        return event\r\n    }\r\n}\r\n\r\nvar XHR_STATES = {\r\n    // The object has been constructed.\r\n    UNSENT: 0,\r\n    // The open() method has been successfully invoked.\r\n    OPENED: 1,\r\n    // All redirects (if any) have been followed and all HTTP headers of the response have been received.\r\n    HEADERS_RECEIVED: 2,\r\n    // The response's body is being received.\r\n    LOADING: 3,\r\n    // The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).\r\n    DONE: 4\r\n}\r\n\r\nvar XHR_EVENTS = 'readystatechange loadstart progress abort error load timeout loadend'.split(' ')\r\nvar XHR_REQUEST_PROPERTIES = 'timeout withCredentials'.split(' ')\r\nvar XHR_RESPONSE_PROPERTIES = 'readyState responseURL status statusText responseType response responseText responseXML'.split(' ')\r\n\r\n// https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js#L32\r\nvar HTTP_STATUS_CODES = {\r\n    100: \"Continue\",\r\n    101: \"Switching Protocols\",\r\n    200: \"OK\",\r\n    201: \"Created\",\r\n    202: \"Accepted\",\r\n    203: \"Non-Authoritative Information\",\r\n    204: \"No Content\",\r\n    205: \"Reset Content\",\r\n    206: \"Partial Content\",\r\n    300: \"Multiple Choice\",\r\n    301: \"Moved Permanently\",\r\n    302: \"Found\",\r\n    303: \"See Other\",\r\n    304: \"Not Modified\",\r\n    305: \"Use Proxy\",\r\n    307: \"Temporary Redirect\",\r\n    400: \"Bad Request\",\r\n    401: \"Unauthorized\",\r\n    402: \"Payment Required\",\r\n    403: \"Forbidden\",\r\n    404: \"Not Found\",\r\n    405: \"Method Not Allowed\",\r\n    406: \"Not Acceptable\",\r\n    407: \"Proxy Authentication Required\",\r\n    408: \"Request Timeout\",\r\n    409: \"Conflict\",\r\n    410: \"Gone\",\r\n    411: \"Length Required\",\r\n    412: \"Precondition Failed\",\r\n    413: \"Request Entity Too Large\",\r\n    414: \"Request-URI Too Long\",\r\n    415: \"Unsupported Media Type\",\r\n    416: \"Requested Range Not Satisfiable\",\r\n    417: \"Expectation Failed\",\r\n    422: \"Unprocessable Entity\",\r\n    500: \"Internal Server Error\",\r\n    501: \"Not Implemented\",\r\n    502: \"Bad Gateway\",\r\n    503: \"Service Unavailable\",\r\n    504: \"Gateway Timeout\",\r\n    505: \"HTTP Version Not Supported\"\r\n}\r\n\r\n/*\r\n    MockXMLHttpRequest\r\n*/\r\n\r\nfunction MockXMLHttpRequest() {\r\n    // 初始化 custom 对象，用于存储自定义属性\r\n    this.custom = {\r\n        events: {},\r\n        requestHeaders: {},\r\n        responseHeaders: {}\r\n    }\r\n}\r\n\r\nMockXMLHttpRequest._settings = {\r\n    timeout: '10-100',\r\n    /*\r\n        timeout: 50,\r\n        timeout: '10-100',\r\n     */\r\n}\r\n\r\nMockXMLHttpRequest.setup = function(settings) {\r\n    Util.extend(MockXMLHttpRequest._settings, settings)\r\n    return MockXMLHttpRequest._settings\r\n}\r\n\r\nUtil.extend(MockXMLHttpRequest, XHR_STATES)\r\nUtil.extend(MockXMLHttpRequest.prototype, XHR_STATES)\r\n\r\n// 标记当前对象为 MockXMLHttpRequest\r\nMockXMLHttpRequest.prototype.ajaxIntercept = true\r\n\r\n// 是否拦截 Ajax 请求\r\nMockXMLHttpRequest.prototype.match = false\r\n\r\n// 初始化 Request 相关的属性和方法\r\nUtil.extend(MockXMLHttpRequest.prototype, {\r\n    // https://xhr.spec.whatwg.org/#the-open()-method\r\n    // Sets the request method, request URL, and synchronous flag.\r\n    open: function(method, url, async, username, password) {\r\n        var that = this\r\n\r\n        Util.extend(this.custom, {\r\n            method: method,\r\n            url: url,\r\n            async: typeof async === 'boolean' ? async : true,\r\n            username: username,\r\n            password: password,\r\n            options: {\r\n                url: url,\r\n                type: method\r\n            }\r\n        })\r\n\r\n        this.custom.timeout = function(timeout) {\r\n            if (typeof timeout === 'number') return timeout\r\n            if (typeof timeout === 'string' && !~timeout.indexOf('-')) return parseInt(timeout, 10)\r\n            if (typeof timeout === 'string' && ~timeout.indexOf('-')) {\r\n                var tmp = timeout.split('-')\r\n                var min = parseInt(tmp[0], 10)\r\n                var max = parseInt(tmp[1], 10)\r\n                return Math.round(Math.random() * (max - min)) + min\r\n            }\r\n        }(MockXMLHttpRequest._settings.timeout)\r\n\r\n        // 查找与请求参数匹配的数据模板\r\n        var item = find(this.custom.options)\r\n\r\n        function handle(event) {\r\n            // 同步属性 NativeXMLHttpRequest => MockXMLHttpRequest\r\n            for (var i = 0; i < XHR_RESPONSE_PROPERTIES.length; i++) {\r\n                try {\r\n                    that[XHR_RESPONSE_PROPERTIES[i]] = xhr[XHR_RESPONSE_PROPERTIES[i]]\r\n                } catch (e) {}\r\n            }\r\n            // 触发 MockXMLHttpRequest 上的同名事件\r\n            that.dispatchEvent(new Event(event.type /*, false, false, that*/ ))\r\n        }\r\n\r\n        // 如果未找到匹配的数据模板，则采用原生 XHR 发送请求。\r\n        if (!item) {\r\n            // 创建原生 XHR 对象，调用原生 open()，监听所有原生事件\r\n            var xhr = createNativeXMLHttpRequest()\r\n            this.custom.xhr = xhr\r\n\r\n            // 初始化所有事件，用于监听原生 XHR 对象的事件\r\n            for (var i = 0; i < XHR_EVENTS.length; i++) {\r\n                xhr.addEventListener(XHR_EVENTS[i], handle)\r\n            }\r\n\r\n            // xhr.open()\r\n            if (username) xhr.open(method, url, async, username, password)\r\n            else xhr.open(method, url, async)\r\n\r\n            // 同步属性 MockXMLHttpRequest => NativeXMLHttpRequest\r\n            for (var j = 0; j < XHR_REQUEST_PROPERTIES.length; j++) {\r\n                try {\r\n                    xhr[XHR_REQUEST_PROPERTIES[j]] = that[XHR_REQUEST_PROPERTIES[j]]\r\n                } catch (e) {}\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        // 找到了匹配的数据模板，开始拦截 XHR 请求\r\n        this.match = true\r\n        this.custom.template = item\r\n        this.readyState = MockXMLHttpRequest.OPENED\r\n        this.dispatchEvent(new Event('readystatechange' /*, false, false, this*/ ))\r\n    },\r\n    // https://xhr.spec.whatwg.org/#the-setrequestheader()-method\r\n    // Combines a header in author request headers.\r\n    setRequestHeader: function(name, value) {\r\n        // 原生 XHR\r\n        if (!this.match) {\r\n            this.custom.xhr.setRequestHeader(name, value)\r\n            return\r\n        }\r\n\r\n        // 拦截 XHR\r\n        var requestHeaders = this.custom.requestHeaders\r\n        if (requestHeaders[name]) requestHeaders[name] += ',' + value\r\n        else requestHeaders[name] = value\r\n    },\r\n    timeout: 0,\r\n    withCredentials: false,\r\n    upload: {},\r\n    // https://xhr.spec.whatwg.org/#the-send()-method\r\n    // Initiates the request.\r\n    send: function send(data) {\r\n        var that = this\r\n        this.custom.options.body = data\r\n\r\n        // 原生 XHR\r\n        if (!this.match) {\r\n            this.custom.xhr.send(data)\r\n            return\r\n        }\r\n\r\n        // 拦截 XHR\r\n\r\n        // X-Requested-With header\r\n        this.setRequestHeader('X-Requested-With', 'MockXMLHttpRequest')\r\n\r\n        // loadstart The fetch initiates.\r\n        this.dispatchEvent(new Event('loadstart' /*, false, false, this*/ ))\r\n\r\n        if (this.custom.async) setTimeout(done, this.custom.timeout) // 异步\r\n        else done() // 同步\r\n\r\n        function done() {\r\n            that.readyState = MockXMLHttpRequest.HEADERS_RECEIVED\r\n            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))\r\n            that.readyState = MockXMLHttpRequest.LOADING\r\n            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))\r\n\r\n            that.status = 200\r\n            that.statusText = HTTP_STATUS_CODES[200]\r\n\r\n            function cb(res) {\r\n                // fix #92 #93 by @qddegtya\r\n                that.response = that.responseText = JSON.stringify(\r\n                    res,\r\n                    null, 4\r\n                )\r\n                \r\n                that.readyState = MockXMLHttpRequest.DONE\r\n                that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))\r\n                that.dispatchEvent(new Event('load' /*, false, false, that*/ ));\r\n                that.dispatchEvent(new Event('loadend' /*, false, false, that*/ ));\r\n            }\r\n\r\n            const convertResult = convert(that.custom.template, that.custom.options);\r\n            if (convertResult && typeof convertResult.then === 'function') {\r\n                convertResult.then((res) => {\r\n                    cb(res)\r\n                });\r\n            } else {\r\n                cb(convertResult);\r\n            }\r\n        }\r\n    },\r\n    // https://xhr.spec.whatwg.org/#the-abort()-method\r\n    // Cancels any network activity.\r\n    abort: function abort() {\r\n        // 原生 XHR\r\n        if (!this.match) {\r\n            this.custom.xhr.abort()\r\n            return\r\n        }\r\n\r\n        // 拦截 XHR\r\n        this.readyState = MockXMLHttpRequest.UNSENT\r\n        this.dispatchEvent(new Event('abort', false, false, this))\r\n        this.dispatchEvent(new Event('error', false, false, this))\r\n    }\r\n})\r\n\r\n// 初始化 Response 相关的属性和方法\r\nUtil.extend(MockXMLHttpRequest.prototype, {\r\n    responseURL: '',\r\n    status: MockXMLHttpRequest.UNSENT,\r\n    statusText: '',\r\n    // https://xhr.spec.whatwg.org/#the-getresponseheader()-method\r\n    getResponseHeader: function(name) {\r\n        // 原生 XHR\r\n        if (!this.match) {\r\n            return this.custom.xhr.getResponseHeader(name)\r\n        }\r\n\r\n        // 拦截 XHR\r\n        return this.custom.responseHeaders[name.toLowerCase()]\r\n    },\r\n    // https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method\r\n    // http://www.utf8-chartable.de/\r\n    getAllResponseHeaders: function() {\r\n        // 原生 XHR\r\n        if (!this.match) {\r\n            return this.custom.xhr.getAllResponseHeaders()\r\n        }\r\n\r\n        // 拦截 XHR\r\n        var responseHeaders = this.custom.responseHeaders\r\n        var headers = ''\r\n        for (var h in responseHeaders) {\r\n            if (!responseHeaders.hasOwnProperty(h)) continue\r\n            headers += h + ': ' + responseHeaders[h] + '\\r\\n'\r\n        }\r\n        return headers\r\n    },\r\n    overrideMimeType: function( /*mime*/ ) {},\r\n    responseType: '', // '', 'text', 'arraybuffer', 'blob', 'document', 'json'\r\n    response: null,\r\n    responseText: '',\r\n    responseXML: null\r\n})\r\n\r\n// EventTarget\r\nUtil.extend(MockXMLHttpRequest.prototype, {\r\n    addEventListener: function addEventListener(type, handle) {\r\n        var events = this.custom.events\r\n        if (!events[type]) events[type] = []\r\n        events[type].push(handle)\r\n    },\r\n    removeEventListener: function removeEventListener(type, handle) {\r\n        var handles = this.custom.events[type] || []\r\n        for (var i = 0; i < handles.length; i++) {\r\n            if (handles[i] === handle) {\r\n                handles.splice(i--, 1)\r\n            }\r\n        }\r\n    },\r\n    dispatchEvent: function dispatchEvent(event) {\r\n        var handles = this.custom.events[event.type] || []\r\n        for (var i = 0; i < handles.length; i++) {\r\n            handles[i].call(this, event)\r\n        }\r\n\r\n        var ontype = 'on' + event.type\r\n        if (this[ontype]) this[ontype](event)\r\n    }\r\n})\r\n\r\n// Inspired by jQuery\r\nfunction createNativeXMLHttpRequest() {\r\n    var isLocal = function() {\r\n        var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/\r\n        var rurl = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/\r\n        var ajaxLocation = location.href\r\n        var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []\r\n        return rlocalProtocol.test(ajaxLocParts[1])\r\n    }()\r\n\r\n    return window.ActiveXObject ?\r\n        (!isLocal && createStandardXHR() || createActiveXHR()) : createStandardXHR()\r\n\r\n    function createStandardXHR() {\r\n        try {\r\n            return new window._XMLHttpRequest();\r\n        } catch (e) {}\r\n    }\r\n\r\n    function createActiveXHR() {\r\n        try {\r\n            return new window._ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        } catch (e) {}\r\n    }\r\n}\r\n\r\n\r\n// 查找与请求参数匹配的数据模板：URL，Type\r\nfunction find(options) {\r\n\r\n    for (var sUrlType in MockXMLHttpRequest.AjaxIntercept._mocked) {\r\n        var item = MockXMLHttpRequest.AjaxIntercept._mocked[sUrlType]\r\n        if (\r\n            (!item.rurl || match(item.rurl, options.url)) &&\r\n            (!item.rtype || match(item.rtype, options.type.toLowerCase()))\r\n        ) {\r\n            return item\r\n        }\r\n    }\r\n\r\n    function match(expected, actual) {\r\n        if (Util.type(expected) === 'string') {\r\n            return expected === actual\r\n        }\r\n        if (Util.type(expected) === 'regexp') {\r\n            return expected.test(actual)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// 数据模板 ＝> 响应数据\r\nfunction convert(item, options) {\r\n    return Util.isFunction(item.template) ?\r\n        item.template(options) : MockXMLHttpRequest.AjaxIntercept.add(item.template)\r\n}\r\n\r\nmodule.exports = MockXMLHttpRequest\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ajaxIntercept/xhr/xhr.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}